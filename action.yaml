name: Create Issue From pytest log
description: >-
  Create an issue for failed tests from a pytest-reportlog file.
inputs:
  log-path:
    description: >-
      The path to the log file
    required: true
  issue-title:
    description: >-
      Title of issue being created or updated
    required: false
    default: "⚠️ Nightly upstream-dev CI failed ⚠️"
  issue-label:
    description: >-
      Labels to apply to issue
    required: false
    default: "CI"
  assignees:
    description: >-
      Comma-separated users to assign to the issue (no spaces). All assigned users have to
      have commit rights.
    required: false
    default: ""
outputs: {}
branding:
  color: "red"
  icon: "alert-triangle"

runs:
  using: composite
  # TODO: learn enough javascript / node.js to write the reportlog parsing
  steps:
    - name: print environment information
      shell: bash -l {0}
      run: |
        python --version
        python -m pip list
    - name: install dependencies
      shell: bash -l {0}
      run: |
        python -m pip install pytest more-itertools
    - name: produce the issue body
      shell: bash -l {0}
      run: |
        python $GITHUB_ACTION_PATH/parse_logs.py ${{ inputs.log-path }}
    - name: create the issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const fs = require('fs');
          const pytest_logs = fs.readFileSync('pytest-logs.txt', 'utf8');
          const title = "${{ inputs.issue-title }}";
          const assignees = "${{inputs.assignees}}".split(",");
          const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
          const issue_body = `[Workflow Run URL](${workflow_url})\n${pytest_logs}`;

          // Run GraphQL query against GitHub API to find all open issues created by the bot
          const query = `query($owner:String!, $name:String!, $creator:String!, $label:String!){
            repository(owner: $owner, name: $name) {
              issues(first: 500000, states: OPEN, filterBy: {createdBy: $creator, labels: [$label]}, orderBy: {field: CREATED_AT, direction: DESC}) {
                edges {
                  node {
                    body
                    id
                    number
                    title
                  }
                }
              }
            }
          }`;

          const variables = {
            owner: context.repo.owner,
            name: context.repo.repo,
            label: "${{ inputs.issue-label }}",
            creator: "github-actions[bot]"
          };

          const result = await github.graphql(query, variables);

          // hoping to find issue with matching title
          let existingIssue = result.repository.issues.edges.find(edge => edge.node.title === title);

          // If no issue is found or if fond issue's title doesn't match then we create a new issue
          if (!existingIssue) {
            github.rest.issues.create({
              owner: variables.owner,
              repo: variables.name,
              body: issue_body,
              title: title,
              labels: [variables.label],
              assignees: assignees
            });
          } else {
            // Update the body of the existing issue
            github.rest.issues.update({
              owner: variables.owner,
              repo: variables.name,
              issue_number: existingIssue.node.number,
              body: issue_body
            });
          }